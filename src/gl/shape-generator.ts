import {
  xRotate4_4,
  identity4_4,
  translate4_4,
  vectorMultiply,
} from '../matrix/matrix-4';

export function fPositions() {
  const positions = new Float32Array([
    // left column front
    0,
    0,
    0,
    0,
    150,
    0,
    30,
    0,
    0,
    0,
    150,
    0,
    30,
    150,
    0,
    30,
    0,
    0,

    // top rung front
    30,
    0,
    0,
    30,
    30,
    0,
    100,
    0,
    0,
    30,
    30,
    0,
    100,
    30,
    0,
    100,
    0,
    0,

    // middle rung front
    30,
    60,
    0,
    30,
    90,
    0,
    67,
    60,
    0,
    30,
    90,
    0,
    67,
    90,
    0,
    67,
    60,
    0,

    // left column back
    0,
    0,
    30,
    30,
    0,
    30,
    0,
    150,
    30,
    0,
    150,
    30,
    30,
    0,
    30,
    30,
    150,
    30,

    // top rung back
    30,
    0,
    30,
    100,
    0,
    30,
    30,
    30,
    30,
    30,
    30,
    30,
    100,
    0,
    30,
    100,
    30,
    30,

    // middle rung back
    30,
    60,
    30,
    67,
    60,
    30,
    30,
    90,
    30,
    30,
    90,
    30,
    67,
    60,
    30,
    67,
    90,
    30,

    // top
    0,
    0,
    0,
    100,
    0,
    0,
    100,
    0,
    30,
    0,
    0,
    0,
    100,
    0,
    30,
    0,
    0,
    30,

    // top rung right
    100,
    0,
    0,
    100,
    30,
    0,
    100,
    30,
    30,
    100,
    0,
    0,
    100,
    30,
    30,
    100,
    0,
    30,

    // under top rung
    30,
    30,
    0,
    30,
    30,
    30,
    100,
    30,
    30,
    30,
    30,
    0,
    100,
    30,
    30,
    100,
    30,
    0,

    // between top rung and middle
    30,
    30,
    0,
    30,
    60,
    30,
    30,
    30,
    30,
    30,
    30,
    0,
    30,
    60,
    0,
    30,
    60,
    30,

    // top of middle rung
    30,
    60,
    0,
    67,
    60,
    30,
    30,
    60,
    30,
    30,
    60,
    0,
    67,
    60,
    0,
    67,
    60,
    30,

    // right of middle rung
    67,
    60,
    0,
    67,
    90,
    30,
    67,
    60,
    30,
    67,
    60,
    0,
    67,
    90,
    0,
    67,
    90,
    30,

    // bottom of middle rung.
    30,
    90,
    0,
    30,
    90,
    30,
    67,
    90,
    30,
    30,
    90,
    0,
    67,
    90,
    30,
    67,
    90,
    0,

    // right of bottom
    30,
    90,
    0,
    30,
    150,
    30,
    30,
    90,
    30,
    30,
    90,
    0,
    30,
    150,
    0,
    30,
    150,
    30,

    // bottom
    0,
    150,
    0,
    0,
    150,
    30,
    30,
    150,
    30,
    0,
    150,
    0,
    30,
    150,
    30,
    30,
    150,
    0,

    // left side
    0,
    0,
    0,
    0,
    0,
    30,
    0,
    150,
    30,
    0,
    0,
    0,
    0,
    150,
    30,
    0,
    150,
    0,
  ]);

  let matrix = xRotate4_4(identity4_4(), Math.PI);
  matrix = translate4_4(matrix, -50, -75, -15);

  for (var i = 0; i < positions.length; i += 3) {
    var vector = vectorMultiply(
      [positions[i + 0], positions[i + 1], positions[i + 2], 1],
      matrix
    );
    positions[i + 0] = vector[0];
    positions[i + 1] = vector[1];
    positions[i + 2] = vector[2];
  }

  return positions;
}

export function fColours() {
  return new Uint8Array([
    // left column front
    200,
    70,
    120,
    200,
    70,
    120,
    200,
    70,
    120,
    200,
    70,
    120,
    200,
    70,
    120,
    200,
    70,
    120,

    // top rung front
    200,
    70,
    120,
    200,
    70,
    120,
    200,
    70,
    120,
    200,
    70,
    120,
    200,
    70,
    120,
    200,
    70,
    120,

    // middle rung front
    200,
    70,
    120,
    200,
    70,
    120,
    200,
    70,
    120,
    200,
    70,
    120,
    200,
    70,
    120,
    200,
    70,
    120,

    // left column back
    80,
    70,
    200,
    80,
    70,
    200,
    80,
    70,
    200,
    80,
    70,
    200,
    80,
    70,
    200,
    80,
    70,
    200,

    // top rung back
    80,
    70,
    200,
    80,
    70,
    200,
    80,
    70,
    200,
    80,
    70,
    200,
    80,
    70,
    200,
    80,
    70,
    200,

    // middle rung back
    80,
    70,
    200,
    80,
    70,
    200,
    80,
    70,
    200,
    80,
    70,
    200,
    80,
    70,
    200,
    80,
    70,
    200,

    // top
    70,
    200,
    210,
    70,
    200,
    210,
    70,
    200,
    210,
    70,
    200,
    210,
    70,
    200,
    210,
    70,
    200,
    210,

    // top rung right
    200,
    200,
    70,
    200,
    200,
    70,
    200,
    200,
    70,
    200,
    200,
    70,
    200,
    200,
    70,
    200,
    200,
    70,

    // under top rung
    210,
    100,
    70,
    210,
    100,
    70,
    210,
    100,
    70,
    210,
    100,
    70,
    210,
    100,
    70,
    210,
    100,
    70,

    // between top rung and middle
    210,
    160,
    70,
    210,
    160,
    70,
    210,
    160,
    70,
    210,
    160,
    70,
    210,
    160,
    70,
    210,
    160,
    70,

    // top of middle rung
    70,
    180,
    210,
    70,
    180,
    210,
    70,
    180,
    210,
    70,
    180,
    210,
    70,
    180,
    210,
    70,
    180,
    210,

    // right of middle rung
    100,
    70,
    210,
    100,
    70,
    210,
    100,
    70,
    210,
    100,
    70,
    210,
    100,
    70,
    210,
    100,
    70,
    210,

    // bottom of middle rung.
    76,
    210,
    100,
    76,
    210,
    100,
    76,
    210,
    100,
    76,
    210,
    100,
    76,
    210,
    100,
    76,
    210,
    100,

    // right of bottom
    140,
    210,
    80,
    140,
    210,
    80,
    140,
    210,
    80,
    140,
    210,
    80,
    140,
    210,
    80,
    140,
    210,
    80,

    // bottom
    90,
    130,
    110,
    90,
    130,
    110,
    90,
    130,
    110,
    90,
    130,
    110,
    90,
    130,
    110,
    90,
    130,
    110,

    // left side
    160,
    160,
    220,
    160,
    160,
    220,
    160,
    160,
    220,
    160,
    160,
    220,
    160,
    160,
    220,
    160,
    160,
    220,
  ]);
}

export function cubeNormals() {
  return new Float32Array([
    // front face
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    // right face
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    // back face
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    // left face
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    // top
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    // bottom
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
  ]);
}

export function cubePositions() {
  return new Float32Array([
    // front face
    0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    // right face
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    0.5,
    // back face
    -0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    // left face
    -0.5,
    0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    // top
    0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    0.5,
    // bottom
    -0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    0.5,
    0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    0.5,
    -0.5,
    -0.5,
    -0.5,
  ]);
}

export function cubeBlue() {
  const arr: number[] = [];
  for (let i = 0; i < 12 * 6; i += 1) {
    arr.push(59);
    arr.push(139);
    arr.push(237);
  }
  return new Uint8Array(arr);
}

export function cubeRed() {
  const arr: number[] = [];
  for (let i = 0; i < 12 * 6; i += 1) {
    arr.push(232);
    arr.push(51);
    arr.push(51);
  }
  return new Uint8Array(arr);
}

export function cubeGreen() {
  const arr: number[] = [];
  for (let i = 0; i < 12 * 6; i += 1) {
    arr.push(45);
    arr.push(207);
    arr.push(51);
  }
  return new Uint8Array(arr);
}

export function cubeBlack() {
  const arr: number[] = [];
  for (let i = 0; i < 12 * 6; i += 1) {
    arr.push(0);
    arr.push(0);
    arr.push(0);
  }
  return new Uint8Array(arr);
}

export function cubeColours() {
  return new Uint8Array([
    // front face
    0,
    0,
    200,
    0,
    0,
    200,
    0,
    0,
    200,
    0,
    0,
    200,
    0,
    0,
    200,
    0,
    0,
    200,
    // right face
    100,
    0,
    100,
    100,
    0,
    100,
    100,
    0,
    100,
    100,
    0,
    100,
    100,
    0,
    100,
    100,
    0,
    100,
    // back face
    0,
    200,
    0,
    0,
    200,
    0,
    0,
    200,
    0,
    0,
    200,
    0,
    0,
    200,
    0,
    0,
    200,
    0,
    // left face
    200,
    200,
    0,
    200,
    200,
    0,
    200,
    200,
    0,
    200,
    200,
    0,
    200,
    200,
    0,
    200,
    200,
    0,
    // top
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    // bottom
    0,
    200,
    200,
    0,
    200,
    200,
    0,
    200,
    200,
    0,
    200,
    200,
    0,
    200,
    200,
    0,
    200,
    200,
  ]);
}

export function fNormals() {
  return new Float32Array([
    // left column front
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,

    // top rung front
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,

    // middle rung front
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,

    // left column back
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,

    // top rung back
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,

    // middle rung back
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,

    // top
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,

    // top rung right
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,

    // under top rung
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,

    // between top rung and middle
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,

    // top of middle rung
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,

    // right of middle rung
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,

    // bottom of middle rung.
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,

    // right of bottom
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,
    1,
    0,
    0,

    // bottom
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,

    // left side
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    0,
    0,
  ]);
}

export function cubeTextures() {
  return new Float32Array([
    // front face
    512 / 511,
    512 / 511,
    256 / 511,
    512 / 511,
    512 / 511,
    256 / 511,
    512 / 511,
    256 / 511,
    256 / 511,
    512 / 511,
    256 / 511,
    256 / 511,
    // 0.5, -0.5, -0.5,
    // -0.5, -0.5, -0.5,
    // 0.5, 0.5, -0.5,
    // 0.5, 0.5, -0.5,
    // -0.5, -0.5, -0.5,
    // -0.5, 0.5, -0.5,
    // right face
    0.5,
    1,
    0,
    1,
    0,
    0.5,
    0.5,
    1,
    0,
    0.5,
    0.5,
    0.5,

    // 0.5, -0.5, 0.5,
    // 0.5, -0.5, -0.5,
    // 0.5, 0.5, -0.5,
    // 0.5, -0.5, 0.5,
    // 0.5, 0.5, -0.5,
    // 0.5, 0.5, 0.5,
    // back face
    0.5,
    0.5,
    0,
    0.5,
    0,
    0,
    0.5,
    0.5,
    0,
    0,
    0.5,
    0,
    // -0.5, -0.5, 0.5,
    // 0.5, -0.5, 0.5,
    // 0.5, 0.5, 0.5,
    // -0.5, -0.5, 0.5,
    // 0.5, 0.5, 0.5,
    // -0.5, 0.5, 0.5,
    // left face
    1,
    0,
    1,
    0.5,
    0.5,
    0.5,
    1,
    0,
    0.5,
    0.5,
    0.5,
    0,
    // -0.5, 0.5, -0.5,
    // -0.5, -0.5, -0.5,
    // -0.5, -0.5, 0.5,
    // -0.5, 0.5, -0.5,
    // -0.5, -0.5, 0.5,
    // -0.5, 0.5, 0.5,
    // top
    1,
    1,
    0,
    1,
    0,
    0,
    1,
    1,
    0,
    0,
    1,
    0,
    // 0.5, 0.5, -0.5,
    // -0.5, 0.5, -0.5,
    // -0.5, 0.5, 0.5,
    // 0.5, 0.5, -0.5,
    // -0.5, 0.5, 0.5,
    // 0.5, 0.5, 0.5,
    // bottom
    0,
    0,
    1,
    0,
    1,
    1,
    1,
    1,
    0,
    1,
    0,
    0,
    // -0.5, -0.5, -0.5,
    // 0.5, -0.5, -0.5,
    // 0.5, -0.5, 0.5,
    // 0.5, -0.5, 0.5,
    // -0.5, -0.5, 0.5,
    // -0.5, -0.5, -0.5,
  ]);
}
